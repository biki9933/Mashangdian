{"remainingRequest":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\src\\page\\analysis\\analysis.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\src\\page\\analysis\\analysis.vue","mtime":1733211949273},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733062317302},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\babel-loader\\lib\\index.js","mtime":1733062318538},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733062317302},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\vue-loader\\lib\\index.js","mtime":1733062316941}],"contextDependencies":[],"result":["\nimport { mapGetters } from 'vuex'\nimport * as echarts from 'echarts'\n\nexport default {\n  data() {\n    return {\n      statistics: {\n        todayOrders: 0,\n        todayAmount: 0,\n        monthOrders: 0,\n        monthAmount: 0\n      },\n      timeRange: 'week',\n      hotDishes: [],\n      salesChart: null\n    }\n  },\n  \n  computed: {\n    ...mapGetters(['currentMerchant'])\n  },\n  \n  created() {\n    this.getStatistics()\n    this.getHotDishes()\n  },\n  \n  mounted() {\n    this.$nextTick(() => {\n      this.initSalesChart()\n    })\n  },\n  \n  beforeDestroy() {\n    if (this.salesChart) {\n      this.salesChart.dispose()\n    }\n  },\n  \n  methods: {\n    \n    // 获取统计数据\nasync getStatistics() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.statistics,\n      { merchantId: this.currentMerchant.id }\n    ).modeget();\n    \n    // 检查两种可能的状态码\n    if (res.code === 0 || res.icode === 0) {\n      const salesData = res.salesVolumeList || [];\n      \n      // 计算今日和本月数据\n      const today = new Date().toISOString().split('T')[0];\n      const thisMonth = today.substring(0, 7);\n      \n      const todayData = salesData.find(item => item.time === today) || {};\n      const monthData = salesData.filter(item => item.time.startsWith(thisMonth));\n      \n      this.statistics = {\n        todayAmount: parseFloat(todayData.salesVolume || 0),\n        monthAmount: monthData.reduce((sum, item) => sum + parseFloat(item.salesVolume || 0), 0)\n      };\n      \n      this.updateSalesChart(salesData);\n    }\n  } catch (error) {\n    console.error('获取统计数据失败：', error);\n    this.$message.error('获取统计数据失败');\n  }\n},\n    \nasync getHotDishes() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.dishSales\n    ).modeget()\n    \n    if (res.code === 0 || res.icode === 0) {\n      this.hotDishes = (res.salesData || []).map(item => ({\n        name: item.dishName,\n        categoryName: item.categoryName || '',\n        salesCount: item.salesCount,\n        salesAmount: item.totalAmount\n      }));\n    }\n  } catch (error) {\n    console.error('获取热销商品数据失败：', error)\n    this.$message.error('获取热销商品数据失败')\n  }\n},\n    \n    // 初始化销售趋势图\n    initSalesChart() {\n      this.salesChart = echarts.init(this.$refs.salesChart)\n      this.salesChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            name: '销售额',\n            type: 'line',\n            data: []\n          }\n        ]\n      })\n      \n      window.addEventListener('resize', this.resizeChart)\n    },\n    \n    // 更新销售趋势图数据\n    updateSalesChart(data) {\n      if (!this.salesChart) return;\n      \n      const dates = data.map(item => item.time);\n      const amounts = data.map(item => item.salesVolume);\n      \n      this.salesChart.setOption({\n        xAxis: {\n          data: dates\n        },\n        series: [\n          {\n            data: amounts\n          }\n        ]\n      });\n    },\n    \n    // 图表自适应\n    resizeChart() {\n      if (this.salesChart) {\n        this.salesChart.resize()\n      }\n    }\n  }\n}\n",{"version":3,"sources":["analysis.vue"],"names":[],"mappings":";AA6EA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"analysis.vue","sourceRoot":"src/page/analysis","sourcesContent":["<template>\n  <div class=\"analysis-container\">\n    <!-- 商户信息卡片 -->\n    <el-card class=\"merchant-card\">\n      <div slot=\"header\">\n        <span>商户信息</span>\n      </div>\n      <div class=\"merchant-info\">\n        <p>商户名称：{{ currentMerchant.name }}</p>\n        <p>商户ID：{{ currentMerchant.id }}</p>\n      </div>\n    </el-card>\n\n    <!-- 数据概览 -->\n    <el-row :gutter=\"20\" class=\"data-overview\">\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">今日订单数</div>\n            <div class=\"data-value\">{{ statistics.todayOrders }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">今日营业额</div>\n            <div class=\"data-value\">¥{{ statistics.todayAmount }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">本月订单数</div>\n            <div class=\"data-value\">{{ statistics.monthOrders }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">本月营业额</div>\n            <div class=\"data-value\">¥{{ statistics.monthAmount }}</div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 销售趋势图 -->\n    <el-card class=\"chart-card\">\n      <div slot=\"header\">\n        <span>销售趋势</span>\n        <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"getStatistics\">\n          <el-radio-button label=\"week\">最近一周</el-radio-button>\n          <el-radio-button label=\"month\">最近一月</el-radio-button>\n        </el-radio-group>\n      </div>\n      <div class=\"chart-container\" ref=\"salesChart\"></div>\n    </el-card>\n\n    <!-- 热销商品排行 -->\n    <el-card class=\"chart-card\">\n      <div slot=\"header\">\n        <span>热销商品排行</span>\n      </div>\n      <el-table :data=\"hotDishes\" border>\n        <el-table-column prop=\"name\" label=\"菜品名称\"></el-table-column>\n        <el-table-column prop=\"categoryName\" label=\"所属分类\"></el-table-column>\n        <el-table-column prop=\"salesCount\" label=\"销量\"></el-table-column>\n        <el-table-column prop=\"salesAmount\" label=\"销售额\"></el-table-column>\n      </el-table>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport * as echarts from 'echarts'\n\nexport default {\n  data() {\n    return {\n      statistics: {\n        todayOrders: 0,\n        todayAmount: 0,\n        monthOrders: 0,\n        monthAmount: 0\n      },\n      timeRange: 'week',\n      hotDishes: [],\n      salesChart: null\n    }\n  },\n  \n  computed: {\n    ...mapGetters(['currentMerchant'])\n  },\n  \n  created() {\n    this.getStatistics()\n    this.getHotDishes()\n  },\n  \n  mounted() {\n    this.$nextTick(() => {\n      this.initSalesChart()\n    })\n  },\n  \n  beforeDestroy() {\n    if (this.salesChart) {\n      this.salesChart.dispose()\n    }\n  },\n  \n  methods: {\n    \n    // 获取统计数据\nasync getStatistics() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.statistics,\n      { merchantId: this.currentMerchant.id }\n    ).modeget();\n    \n    // 检查两种可能的状态码\n    if (res.code === 0 || res.icode === 0) {\n      const salesData = res.salesVolumeList || [];\n      \n      // 计算今日和本月数据\n      const today = new Date().toISOString().split('T')[0];\n      const thisMonth = today.substring(0, 7);\n      \n      const todayData = salesData.find(item => item.time === today) || {};\n      const monthData = salesData.filter(item => item.time.startsWith(thisMonth));\n      \n      this.statistics = {\n        todayAmount: parseFloat(todayData.salesVolume || 0),\n        monthAmount: monthData.reduce((sum, item) => sum + parseFloat(item.salesVolume || 0), 0)\n      };\n      \n      this.updateSalesChart(salesData);\n    }\n  } catch (error) {\n    console.error('获取统计数据失败：', error);\n    this.$message.error('获取统计数据失败');\n  }\n},\n    \nasync getHotDishes() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.dishSales\n    ).modeget()\n    \n    if (res.code === 0 || res.icode === 0) {\n      this.hotDishes = (res.salesData || []).map(item => ({\n        name: item.dishName,\n        categoryName: item.categoryName || '',\n        salesCount: item.salesCount,\n        salesAmount: item.totalAmount\n      }));\n    }\n  } catch (error) {\n    console.error('获取热销商品数据失败：', error)\n    this.$message.error('获取热销商品数据失败')\n  }\n},\n    \n    // 初始化销售趋势图\n    initSalesChart() {\n      this.salesChart = echarts.init(this.$refs.salesChart)\n      this.salesChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            name: '销售额',\n            type: 'line',\n            data: []\n          }\n        ]\n      })\n      \n      window.addEventListener('resize', this.resizeChart)\n    },\n    \n    // 更新销售趋势图数据\n    updateSalesChart(data) {\n      if (!this.salesChart) return;\n      \n      const dates = data.map(item => item.time);\n      const amounts = data.map(item => item.salesVolume);\n      \n      this.salesChart.setOption({\n        xAxis: {\n          data: dates\n        },\n        series: [\n          {\n            data: amounts\n          }\n        ]\n      });\n    },\n    \n    // 图表自适应\n    resizeChart() {\n      if (this.salesChart) {\n        this.salesChart.resize()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.merchant-card {\n  margin-bottom: 24px;\n  border-radius: 8px;\n}\n\n.card-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.merchant-info p {\n  margin: 12px 0;\n  font-size: 14px;\n  color: #606266;\n}\n\n.data-overview {\n  margin: 24px 0;\n}\n\n.data-card {\n  transition: all 0.3s ease;\n  border-radius: 8px;\n}\n\n.data-card:hover {\n  transform: translateY(-2px);\n}\n\n.data-item {\n  padding: 20px;\n  text-align: center;\n}\n\n.data-title {\n  font-size: 14px;\n  color: #909399;\n  margin-bottom: 12px;\n}\n\n.data-value {\n  font-size: 24px;\n  font-weight: 600;\n  color: #409EFF;\n}\n\n.chart-card {\n  margin-top: 24px;\n  border-radius: 8px;\n}\n\n.chart-container {\n  height: 400px;\n  margin-top: 12px;\n}\n</style>"]}]}