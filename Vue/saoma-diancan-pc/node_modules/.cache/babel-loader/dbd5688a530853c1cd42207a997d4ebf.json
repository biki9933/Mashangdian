{"remainingRequest":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\babel-loader\\lib\\index.js!D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\src\\page\\analysis\\analysis.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\src\\page\\analysis\\analysis.vue","mtime":1733211949273},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\babel.config.js","mtime":1618227600000},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733062317302},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\babel-loader\\lib\\index.js","mtime":1733062318538},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733062317302},{"path":"D:\\git\\Mashangdian\\Vue\\saoma-diancan-pc\\node_modules\\vue-loader\\lib\\index.js","mtime":1733062316941}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.date.to-iso-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:/git/Mashangdian/Vue/saoma-diancan-pc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/git/Mashangdian/Vue/saoma-diancan-pc/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { mapGetters } from 'vuex';\nimport * as echarts from 'echarts';\nexport default {\n  data: function data() {\n    return {\n      statistics: {\n        todayOrders: 0,\n        todayAmount: 0,\n        monthOrders: 0,\n        monthAmount: 0\n      },\n      timeRange: 'week',\n      hotDishes: [],\n      salesChart: null\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['currentMerchant'])),\n  created: function created() {\n    this.getStatistics();\n    this.getHotDishes();\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      _this.initSalesChart();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.salesChart) {\n      this.salesChart.dispose();\n    }\n  },\n  methods: {\n    // 获取统计数据\n    getStatistics: function () {\n      var _getStatistics = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var res, salesData, today, thisMonth, todayData, monthData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return new this.Request(this.Urls.admin.statistics, {\n                merchantId: this.currentMerchant.id\n              }).modeget();\n            case 3:\n              res = _context.sent;\n              // 检查两种可能的状态码\n              if (res.code === 0 || res.icode === 0) {\n                salesData = res.salesVolumeList || []; // 计算今日和本月数据\n                today = new Date().toISOString().split('T')[0];\n                thisMonth = today.substring(0, 7);\n                todayData = salesData.find(function (item) {\n                  return item.time === today;\n                }) || {};\n                monthData = salesData.filter(function (item) {\n                  return item.time.startsWith(thisMonth);\n                });\n                this.statistics = {\n                  todayAmount: parseFloat(todayData.salesVolume || 0),\n                  monthAmount: monthData.reduce(function (sum, item) {\n                    return sum + parseFloat(item.salesVolume || 0);\n                  }, 0)\n                };\n                this.updateSalesChart(salesData);\n              }\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('获取统计数据失败：', _context.t0);\n              this.$message.error('获取统计数据失败');\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n      function getStatistics() {\n        return _getStatistics.apply(this, arguments);\n      }\n      return getStatistics;\n    }(),\n    getHotDishes: function () {\n      var _getHotDishes = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return new this.Request(this.Urls.admin.dishSales).modeget();\n            case 3:\n              res = _context2.sent;\n              if (res.code === 0 || res.icode === 0) {\n                this.hotDishes = (res.salesData || []).map(function (item) {\n                  return {\n                    name: item.dishName,\n                    categoryName: item.categoryName || '',\n                    salesCount: item.salesCount,\n                    salesAmount: item.totalAmount\n                  };\n                });\n              }\n              _context2.next = 11;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('获取热销商品数据失败：', _context2.t0);\n              this.$message.error('获取热销商品数据失败');\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function getHotDishes() {\n        return _getHotDishes.apply(this, arguments);\n      }\n      return getHotDishes;\n    }(),\n    // 初始化销售趋势图\n    initSalesChart: function initSalesChart() {\n      this.salesChart = echarts.init(this.$refs.salesChart);\n      this.salesChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '销售额',\n          type: 'line',\n          data: []\n        }]\n      });\n      window.addEventListener('resize', this.resizeChart);\n    },\n    // 更新销售趋势图数据\n    updateSalesChart: function updateSalesChart(data) {\n      if (!this.salesChart) return;\n      var dates = data.map(function (item) {\n        return item.time;\n      });\n      var amounts = data.map(function (item) {\n        return item.salesVolume;\n      });\n      this.salesChart.setOption({\n        xAxis: {\n          data: dates\n        },\n        series: [{\n          data: amounts\n        }]\n      });\n    },\n    // 图表自适应\n    resizeChart: function resizeChart() {\n      if (this.salesChart) {\n        this.salesChart.resize();\n      }\n    }\n  }\n};",{"version":3,"names":["mapGetters","echarts","data","statistics","todayOrders","todayAmount","monthOrders","monthAmount","timeRange","hotDishes","salesChart","computed","_objectSpread","created","getStatistics","getHotDishes","mounted","_this","$nextTick","initSalesChart","beforeDestroy","dispose","methods","_getStatistics","_asyncToGenerator","regeneratorRuntime","mark","_callee","res","salesData","today","thisMonth","todayData","monthData","wrap","_callee$","_context","prev","next","Request","Urls","admin","merchantId","currentMerchant","id","modeget","sent","code","icode","salesVolumeList","Date","toISOString","split","substring","find","item","time","filter","startsWith","parseFloat","salesVolume","reduce","sum","updateSalesChart","t0","console","error","$message","stop","apply","arguments","_getHotDishes","_callee2","_callee2$","_context2","dishSales","map","name","dishName","categoryName","salesCount","salesAmount","totalAmount","init","$refs","setOption","tooltip","trigger","xAxis","type","yAxis","series","window","addEventListener","resizeChart","dates","amounts","resize"],"sources":["src/page/analysis/analysis.vue"],"sourcesContent":["<template>\n  <div class=\"analysis-container\">\n    <!-- 商户信息卡片 -->\n    <el-card class=\"merchant-card\">\n      <div slot=\"header\">\n        <span>商户信息</span>\n      </div>\n      <div class=\"merchant-info\">\n        <p>商户名称：{{ currentMerchant.name }}</p>\n        <p>商户ID：{{ currentMerchant.id }}</p>\n      </div>\n    </el-card>\n\n    <!-- 数据概览 -->\n    <el-row :gutter=\"20\" class=\"data-overview\">\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">今日订单数</div>\n            <div class=\"data-value\">{{ statistics.todayOrders }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">今日营业额</div>\n            <div class=\"data-value\">¥{{ statistics.todayAmount }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">本月订单数</div>\n            <div class=\"data-value\">{{ statistics.monthOrders }}</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"data-card\">\n          <div class=\"data-item\">\n            <div class=\"data-title\">本月营业额</div>\n            <div class=\"data-value\">¥{{ statistics.monthAmount }}</div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 销售趋势图 -->\n    <el-card class=\"chart-card\">\n      <div slot=\"header\">\n        <span>销售趋势</span>\n        <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"getStatistics\">\n          <el-radio-button label=\"week\">最近一周</el-radio-button>\n          <el-radio-button label=\"month\">最近一月</el-radio-button>\n        </el-radio-group>\n      </div>\n      <div class=\"chart-container\" ref=\"salesChart\"></div>\n    </el-card>\n\n    <!-- 热销商品排行 -->\n    <el-card class=\"chart-card\">\n      <div slot=\"header\">\n        <span>热销商品排行</span>\n      </div>\n      <el-table :data=\"hotDishes\" border>\n        <el-table-column prop=\"name\" label=\"菜品名称\"></el-table-column>\n        <el-table-column prop=\"categoryName\" label=\"所属分类\"></el-table-column>\n        <el-table-column prop=\"salesCount\" label=\"销量\"></el-table-column>\n        <el-table-column prop=\"salesAmount\" label=\"销售额\"></el-table-column>\n      </el-table>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport * as echarts from 'echarts'\n\nexport default {\n  data() {\n    return {\n      statistics: {\n        todayOrders: 0,\n        todayAmount: 0,\n        monthOrders: 0,\n        monthAmount: 0\n      },\n      timeRange: 'week',\n      hotDishes: [],\n      salesChart: null\n    }\n  },\n  \n  computed: {\n    ...mapGetters(['currentMerchant'])\n  },\n  \n  created() {\n    this.getStatistics()\n    this.getHotDishes()\n  },\n  \n  mounted() {\n    this.$nextTick(() => {\n      this.initSalesChart()\n    })\n  },\n  \n  beforeDestroy() {\n    if (this.salesChart) {\n      this.salesChart.dispose()\n    }\n  },\n  \n  methods: {\n    \n    // 获取统计数据\nasync getStatistics() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.statistics,\n      { merchantId: this.currentMerchant.id }\n    ).modeget();\n    \n    // 检查两种可能的状态码\n    if (res.code === 0 || res.icode === 0) {\n      const salesData = res.salesVolumeList || [];\n      \n      // 计算今日和本月数据\n      const today = new Date().toISOString().split('T')[0];\n      const thisMonth = today.substring(0, 7);\n      \n      const todayData = salesData.find(item => item.time === today) || {};\n      const monthData = salesData.filter(item => item.time.startsWith(thisMonth));\n      \n      this.statistics = {\n        todayAmount: parseFloat(todayData.salesVolume || 0),\n        monthAmount: monthData.reduce((sum, item) => sum + parseFloat(item.salesVolume || 0), 0)\n      };\n      \n      this.updateSalesChart(salesData);\n    }\n  } catch (error) {\n    console.error('获取统计数据失败：', error);\n    this.$message.error('获取统计数据失败');\n  }\n},\n    \nasync getHotDishes() {\n  try {\n    const res = await new this.Request(\n      this.Urls.admin.dishSales\n    ).modeget()\n    \n    if (res.code === 0 || res.icode === 0) {\n      this.hotDishes = (res.salesData || []).map(item => ({\n        name: item.dishName,\n        categoryName: item.categoryName || '',\n        salesCount: item.salesCount,\n        salesAmount: item.totalAmount\n      }));\n    }\n  } catch (error) {\n    console.error('获取热销商品数据失败：', error)\n    this.$message.error('获取热销商品数据失败')\n  }\n},\n    \n    // 初始化销售趋势图\n    initSalesChart() {\n      this.salesChart = echarts.init(this.$refs.salesChart)\n      this.salesChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            name: '销售额',\n            type: 'line',\n            data: []\n          }\n        ]\n      })\n      \n      window.addEventListener('resize', this.resizeChart)\n    },\n    \n    // 更新销售趋势图数据\n    updateSalesChart(data) {\n      if (!this.salesChart) return;\n      \n      const dates = data.map(item => item.time);\n      const amounts = data.map(item => item.salesVolume);\n      \n      this.salesChart.setOption({\n        xAxis: {\n          data: dates\n        },\n        series: [\n          {\n            data: amounts\n          }\n        ]\n      });\n    },\n    \n    // 图表自适应\n    resizeChart() {\n      if (this.salesChart) {\n        this.salesChart.resize()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.merchant-card {\n  margin-bottom: 24px;\n  border-radius: 8px;\n}\n\n.card-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.merchant-info p {\n  margin: 12px 0;\n  font-size: 14px;\n  color: #606266;\n}\n\n.data-overview {\n  margin: 24px 0;\n}\n\n.data-card {\n  transition: all 0.3s ease;\n  border-radius: 8px;\n}\n\n.data-card:hover {\n  transform: translateY(-2px);\n}\n\n.data-item {\n  padding: 20px;\n  text-align: center;\n}\n\n.data-title {\n  font-size: 14px;\n  color: #909399;\n  margin-bottom: 12px;\n}\n\n.data-value {\n  font-size: 24px;\n  font-weight: 600;\n  color: #409EFF;\n}\n\n.chart-card {\n  margin-top: 24px;\n  border-radius: 8px;\n}\n\n.chart-container {\n  height: 400px;\n  margin-top: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]}]}